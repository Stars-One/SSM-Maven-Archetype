<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
            http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!--
        1. 扫描Service 组件, Mapper 组件
            @Service, @Repository
        2. 配置数据源
        3. 集合mybatis一些相关配置
        4. 数据库事务管理器
        5. AOP事务,即通过AOP方式将数据库事务切到指定的Service组件
    -->

    <context:annotation-config />

    <!-- 扫描dao类（service），可以有多个包使用逗号分隔包名，以完成Bean创建和自动依赖注入的功能-->
    <!--<context:component-scan base-package="dao" />-->

    <!-- 引用属性文件中的数据库资源-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:db.properties"/>
    </bean>

    <!-- 声明一个alibaba druid 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- <property name="driverClassName" value="${jdbc.driver}"></property> -->
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x' FROM DUAL" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat,log4j" />
    </bean>

    <!-- 声明 mybatis SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 需要的话，可以引入单独的myBatis配置文件 -->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->

        <!--可以在此处配置SQL映射文件，但其中不能有相同id的parameterMap, resultMap或sql等-->
        <property name="mapperLocations" value="classpath*:mapper/*.xml" />

        <property name="typeAliasesPackage" value="model" />
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!--使用下面的方式配置参数，一行配置一个 -->
                        <value>
                            <!-- 支持通过Mapper接口参数来传递分页参数
   helperDialect=oracle,mysql,mariadb,sqlite,hsqldb,postgresql,db2,sqlserver,informix,h2,sqlserver2012,derby
                            -->
                            helperDialect=oracle
                            supportMethodsArguments=true
                            rowBoundsWithCount=true
                            offsetAsPageNum=true
                            pageSizeZero=false
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>

    </bean>

    <!-- Scan Mapper Files -->
    <!-- 这种方式也可扫描Mapper接口 -->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>-->
    <!-- scan for mappers and let them be autowired -->
    <mybatis:scan base-package="dao" />

    <!--================事务相关控制===================-->
    <bean name="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- AOP事务
     Service:
      newAccount(){
         DAO:
         1. from
         2. to
         3. log
       }

      <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />

          propagation: 事务的传播行为
          read-only：是否是只读事务，此事务内只能做查询，不能做insert,update,delete操作
          rollback-for: 当出现此类异常时，该事务回滚

      // 必须开启事务
      UserService.insertUser(){

        // otherService.findX()
        otherService.insertXxx(); // c)	Requires_New: 新事务
      }
     -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="new*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--aop配置-->
    <aop:config>

    </aop:config>

</beans>



